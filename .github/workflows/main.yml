name: Build FFmpeg with H.265 Support (Auto-Latest)

on:
  workflow_dispatch:
    inputs:
      target_os:
        description: 'Pilih sistem operasi untuk build (linux, windows, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - linux
          - windows
          - all

jobs:
  ###############################################################
  # JOB A: Ambil Versi Terbaru FFmpeg
  ###############################################################
  get_latest_version:
    runs-on: ubuntu-latest
    outputs:
      ffmpeg_version: ${{ steps.set_version.outputs.ffmpeg_version }}
    steps:
      - name: Ambil versi terbaru FFmpeg dari situs resmi
        id: set_version
        run: |
          # Cari tag .tar.bz2 terbaru, misalnya "6.1.1", "6.2", dll.
          latest=$(curl -s https://ffmpeg.org/releases/ \
                   | grep -oP 'ffmpeg-\K[0-9]+\.[0-9]+(\.[0-9]+)?(?=\.tar\.bz2)' \
                   | sort -V \
                   | tail -1)
          
          if [ -z "$latest" ]; then
            echo "ERROR: Gagal mendeteksi versi terbaru FFmpeg."
            exit 1
          fi
          
          echo "Detected FFmpeg version: $latest"
          echo "ffmpeg_version=$latest" >> $GITHUB_OUTPUT
      - name: Tampilkan versi yang terdeteksi
        run: echo "FFmpeg version = ${{ needs.get_latest_version.outputs.ffmpeg_version }}"

  ###############################################################
  # JOB B: Build Linux (Ubuntu)
  ###############################################################
  build-linux:
    needs: get_latest_version
    if: ${{ github.event.inputs.target_os == 'linux' || github.event.inputs.target_os == 'all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pasang dependensi build di Ubuntu
        run: |
          sudo apt-get update
          # Pastikan pkg-config dan libx265-dev ada:
          sudo apt-get install -y \
            autoconf automake build-essential cmake git libtool pkg-config texinfo wget \
            yasm nasm libx264-dev libx265-dev

      - name: Download & Extract FFmpeg source (Linux)
        run: |
          cd $RUNNER_TEMP
          FFVER=${{ needs.get_latest_version.outputs.ffmpeg_version }}
          wget https://ffmpeg.org/releases/ffmpeg-$FFVER.tar.bz2
          tar xjf ffmpeg-$FFVER.tar.bz2
          mv ffmpeg-$FFVER $HOME/ffmpeg_source

      - name: Configure & Build FFmpeg dengan H.265 (Linux)
        run: |
          FFVER=${{ needs.get_latest_version.outputs.ffmpeg_version }}
          cd $HOME/ffmpeg_source

          # Pastikan pkg-config dapat menemukan x265.pc
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH"

          ./configure \
            --prefix="$HOME/ffmpeg_build" \
            --pkg-config-flags="--static" \
            --extra-cflags="-I$HOME/ffmpeg_build/include" \
            --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
            --extra-libs="-lpthread -lm" \
            --enable-gpl \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libvpx \
            --enable-libfdk-aac \
            --enable-libopus \
            --enable-libass \
            --enable-nonfree

          make -j$(nproc)
          make install
          make distclean

      - name: Package Binaries (Linux)
        run: |
          mkdir -p $HOME/artifacts_linux
          cp $HOME/ffmpeg_build/bin/ffmpeg     $HOME/artifacts_linux/ffmpeg
          cp $HOME/ffmpeg_build/bin/ffprobe    $HOME/artifacts_linux/ffprobe
          cp $HOME/ffmpeg_build/bin/ffplay     $HOME/artifacts_linux/ffplay || true
          cd $HOME
          tar czf ffmpeg-linux-${{ needs.get_latest_version.outputs.ffmpeg_version }}.tar.gz -C artifacts_linux .

      - name: Upload Artifact (Linux)
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-linux-${{ needs.get_latest_version.outputs.ffmpeg_version }}
          path: ffmpeg-linux-${{ needs.get_latest_version.outputs.ffmpeg_version }}.tar.gz

  ###############################################################
  # JOB C: Build Windows (MSYS2 / MinGW-w64)
  ###############################################################
  build-windows:
    needs: get_latest_version
    if: ${{ github.event.inputs.target_os == 'windows' || github.event.inputs.target_os == 'all' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup MSYS2 & Install Dependencies
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-libx264
            mingw-w64-x86_64-libx265

      - name: Download & Extract FFmpeg source (Windows)
        shell: msys2 {0}
        run: |
          cd /c/msys64/tmp
          FFVER=${{ needs.get_latest_version.outputs.ffmpeg_version }}
          wget https://ffmpeg.org/releases/ffmpeg-$FFVER.tar.bz2
          tar xjf ffmpeg-$FFVER.tar.bz2
          mv ffmpeg-$FFVER /c/ffmpeg_source

      - name: Configure & Build FFmpeg dengan H.265 (Windows)
        shell: msys2 {0}
        run: |
          FFVER=${{ needs.get_latest_version.outputs.ffmpeg_version }}
          cd /c/ffmpeg_source

          # Gunakan MinGW-w64 prefix /usr/bin sudah otomatis muncul di PATH MSYS2
          ./configure \
            --prefix="/mingw64" \
            --arch=x86_64 \
            --target-os=mingw32 \
            --enable-gpl \
            --enable-libx264 \
            --enable-libx265 \
            --enable-nonfree
          
          make -j$(nproc)
          make install
          make distclean

      - name: Package Binaries (Windows)
        shell: msys2 {0}
        run: |
          mkdir -p /c/ffmpeg_artifacts
          cp /mingw64/bin/ffmpeg.exe  /c/ffmpeg_artifacts/ffmpeg.exe
          cp /mingw64/bin/ffprobe.exe /c/ffmpeg_artifacts/ffprobe.exe
          cp /mingw64/bin/ffplay.exe  /c/ffmpeg_artifacts/ffplay.exe || true
          cd /c
          zip -r ffmpeg-windows-${{ needs.get_latest_version.outputs.ffmpeg_version }}.zip ffmpeg_artifacts

      - name: Upload Artifact (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-windows-${{ needs.get_latest_version.outputs.ffmpeg_version }}
          path: ffmpeg-windows-${{ needs.get_latest_version.outputs.ffmpeg_version }}.zip

  ###############################################################
  # JOB D: Create Release & Upload Assets
  ###############################################################
  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact Linux (jika ada)
        if: ${{ needs.build-linux.result == 'success' }}
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-linux-${{ needs.get_latest_version.outputs.ffmpeg_version }}
          path: artifacts

      - name: Download Artifact Windows (jika ada)
        if: ${{ needs.build-windows.result == 'success' }}
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-windows-${{ needs.get_latest_version.outputs.ffmpeg_version }}
          path: artifacts

      - name: Create GitHub Release & Upload Assets
        uses: softprops/action-gh-release@v1
        if: ${{ (needs.build-linux.result == 'success') || (needs.build-windows.result == 'success') }}
        with:
          tag_name: ffmpeg-${{ needs.get_latest_version.outputs.ffmpeg_version }}
          name: FFmpeg ${{ needs.get_latest_version.outputs.ffmpeg_version }}
          body: |
            Rilis otomatis untuk FFmpeg versi ${{ needs.get_latest_version.outputs.ffmpeg_version }}  
            Disertakan binary untuk:
            - Linux (Ubuntu)  
            - Windows (MSYS2/MinGW-w64)
          files: |
            artifacts/ffmpeg-linux-${{ needs.get_latest_version.outputs.ffmpeg_version }}.tar.gz
            artifacts/ffmpeg-windows-${{ needs.get_latest_version.outputs.ffmpeg_version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
